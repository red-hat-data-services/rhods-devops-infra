import koji

from os import mkdir, system
from argparse import ArgumentParser
from errata_tool import Erratum
from plumbum import local, FG


def main():
    parser = ArgumentParser(
        prog="python3 main.py",
        description="This programs scans a given erratum ID for containers, then fetches the images' URLs from Brew and then scans the images with ClamAV. Make sure to have a folder clamav in the running directory, which has rwx for all users and also a folder called results, which is only writable to you.",
        epilog="Example: python main.py -e RHSA-2023:4290",
    )
    parser.add_argument("-e", "--erratum-id", required=True, dest="erratum")
    args = parser.parse_args()
    podman = local["podman"]

    erratum = Erratum(errata_id=args.erratum)
    brew = koji.ClientSession("https://brewhub.engineering.redhat.com/brewhub")

    print("Updating database")
    print("-----------------")
    system("./update_db.sh")
    print("\nScanning")
    print("--------")

    try:
        builds = {
            build
            for builds in erratum.errata_builds.values()
            for build in builds
            if "container" in build
        }

        for _build in builds:
            build = brew.getBuild(_build)
            archive = brew.listArchives(build["build_id"])

            print(f'[Scanning build {build["build_id"]}]')

            for archive_item in archive:
                if archive_item["btype"] == "image":
                    archive_info = brew.getArchive(archive_item["id"])
                    if "docker" in archive_info["extra"]:
                        for repo in archive_info["extra"]["docker"]["repositories"]:
                            if not "@sha256:" in repo:
                                continue

                            fldr_name = repo.split("@sha256:")[-1]
                            try:
                                mkdir(f"./results/{fldr_name}")
                            except:
                                pass

                            (
                                podman[
                                    "run",
                                    "--rm",
                                    "-ti",
                                    "-e",
                                    f"IMAGE_NAME={repo}",
                                    "-v",
                                    "./clamav:/var/lib/clamav:z",
                                    "-v",
                                    f"./results/{fldr_name}:/results:z",
                                    "clamav-container-scanner:latest",
                                ]
                                & FG
                            )

                            print("[Done]\n")

    except Exception as e:
        print(f"ERROR: {e}")


if __name__ == "__main__":
    main()
